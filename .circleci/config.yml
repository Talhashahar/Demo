version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  aws-ecr: circleci/aws-ecr@7.0.0

workflows:
  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-and-test
      - build_and_push_image


jobs:
  build-and-test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest

  build_and_push_image:
    - aws-ecr/build-and-push-image:
          aws-access-key-id: AKIATELXLOFIF42HDMXO
          aws-secret-access-key: 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
          create-repo: false
          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: .
          region: eu-central-1
          repo: demo
          skip-when-tags-exist: false
          tag: "main"

  # docker-build-push-dude:
  #   environment:
  #     IMAGE_NAME: demo:<<pipeline.git.branch>>
  #     IMAGE_REMOTE_NAME: public.ecr.aws/y7e1l5y0/demo:<<pipeline.git.branch>>
  #   docker:
  #     - image: circleci/buildpack-deps:stretch
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run:
  #         name: Build Docker image
  #         command: |
  #           docker build -t $IMAGE_NAME .
  #           docker tag $IMAGE_NAME IMAGE_REMOTE_NAME
  #           docker push IMAGE_REMOTE_NAME
